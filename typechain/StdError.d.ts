/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StdErrorInterface extends ethers.utils.Interface {
  functions: {
    "arithmeticError()": FunctionFragment;
    "assertionError()": FunctionFragment;
    "divisionError()": FunctionFragment;
    "encodeStorageError()": FunctionFragment;
    "enumConversionError()": FunctionFragment;
    "indexOOBError()": FunctionFragment;
    "lowLevelError()": FunctionFragment;
    "memOverflowError()": FunctionFragment;
    "popError()": FunctionFragment;
    "zeroVarError()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "arithmeticError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assertionError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "divisionError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeStorageError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enumConversionError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexOOBError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lowLevelError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memOverflowError",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "popError", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroVarError",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "arithmeticError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertionError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divisionError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeStorageError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enumConversionError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOOBError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowLevelError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memOverflowError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "popError", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroVarError",
    data: BytesLike
  ): Result;

  events: {};
}

export class StdError extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StdErrorInterface;

  functions: {
    arithmeticError(overrides?: CallOverrides): Promise<[string]>;

    assertionError(overrides?: CallOverrides): Promise<[string]>;

    divisionError(overrides?: CallOverrides): Promise<[string]>;

    encodeStorageError(overrides?: CallOverrides): Promise<[string]>;

    enumConversionError(overrides?: CallOverrides): Promise<[string]>;

    indexOOBError(overrides?: CallOverrides): Promise<[string]>;

    lowLevelError(overrides?: CallOverrides): Promise<[string]>;

    memOverflowError(overrides?: CallOverrides): Promise<[string]>;

    popError(overrides?: CallOverrides): Promise<[string]>;

    zeroVarError(overrides?: CallOverrides): Promise<[string]>;
  };

  arithmeticError(overrides?: CallOverrides): Promise<string>;

  assertionError(overrides?: CallOverrides): Promise<string>;

  divisionError(overrides?: CallOverrides): Promise<string>;

  encodeStorageError(overrides?: CallOverrides): Promise<string>;

  enumConversionError(overrides?: CallOverrides): Promise<string>;

  indexOOBError(overrides?: CallOverrides): Promise<string>;

  lowLevelError(overrides?: CallOverrides): Promise<string>;

  memOverflowError(overrides?: CallOverrides): Promise<string>;

  popError(overrides?: CallOverrides): Promise<string>;

  zeroVarError(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    arithmeticError(overrides?: CallOverrides): Promise<string>;

    assertionError(overrides?: CallOverrides): Promise<string>;

    divisionError(overrides?: CallOverrides): Promise<string>;

    encodeStorageError(overrides?: CallOverrides): Promise<string>;

    enumConversionError(overrides?: CallOverrides): Promise<string>;

    indexOOBError(overrides?: CallOverrides): Promise<string>;

    lowLevelError(overrides?: CallOverrides): Promise<string>;

    memOverflowError(overrides?: CallOverrides): Promise<string>;

    popError(overrides?: CallOverrides): Promise<string>;

    zeroVarError(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    arithmeticError(overrides?: CallOverrides): Promise<BigNumber>;

    assertionError(overrides?: CallOverrides): Promise<BigNumber>;

    divisionError(overrides?: CallOverrides): Promise<BigNumber>;

    encodeStorageError(overrides?: CallOverrides): Promise<BigNumber>;

    enumConversionError(overrides?: CallOverrides): Promise<BigNumber>;

    indexOOBError(overrides?: CallOverrides): Promise<BigNumber>;

    lowLevelError(overrides?: CallOverrides): Promise<BigNumber>;

    memOverflowError(overrides?: CallOverrides): Promise<BigNumber>;

    popError(overrides?: CallOverrides): Promise<BigNumber>;

    zeroVarError(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    arithmeticError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertionError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divisionError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeStorageError(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enumConversionError(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexOOBError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowLevelError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memOverflowError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    popError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroVarError(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
