/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExchangeProxyInterface extends ethers.utils.Interface {
  functions: {
    "batchEthInSwapExactIn(tuple[],address,uint256)": FunctionFragment;
    "batchEthInSwapExactOut(tuple[],address)": FunctionFragment;
    "batchEthOutSwapExactIn(tuple[],address,uint256,uint256)": FunctionFragment;
    "batchEthOutSwapExactOut(tuple[],address,uint256)": FunctionFragment;
    "batchSwapExactIn(tuple[],address,address,uint256,uint256)": FunctionFragment;
    "batchSwapExactOut(tuple[],address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchEthInSwapExactIn",
    values: [
      {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEthInSwapExactOut",
    values: [
      {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEthOutSwapExactIn",
    values: [
      {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEthOutSwapExactOut",
    values: [
      {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactIn",
    values: [
      {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactOut",
    values: [
      {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchEthInSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEthInSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEthOutSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEthOutSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactOut",
    data: BytesLike
  ): Result;

  events: {};
}

export class ExchangeProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExchangeProxyInterface;

  functions: {
    batchEthInSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchEthInSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchEthOutSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchEthOutSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchEthInSwapExactIn(
    swaps: {
      pool: string;
      tokenInParam: BigNumberish;
      tokenOutParam: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenOut: string,
    minTotalAmountOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchEthInSwapExactOut(
    swaps: {
      pool: string;
      tokenInParam: BigNumberish;
      tokenOutParam: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenOut: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchEthOutSwapExactIn(
    swaps: {
      pool: string;
      tokenInParam: BigNumberish;
      tokenOutParam: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchEthOutSwapExactOut(
    swaps: {
      pool: string;
      tokenInParam: BigNumberish;
      tokenOutParam: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    maxTotalAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactIn(
    swaps: {
      pool: string;
      tokenInParam: BigNumberish;
      tokenOutParam: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactOut(
    swaps: {
      pool: string;
      tokenInParam: BigNumberish;
      tokenOutParam: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchEthInSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      minTotalAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchEthInSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchEthOutSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchEthOutSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    batchEthInSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchEthInSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchEthOutSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchEthOutSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchEthInSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchEthInSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenOut: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchEthOutSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchEthOutSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenInParam: BigNumberish;
        tokenOutParam: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
