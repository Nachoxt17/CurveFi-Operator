/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StdError, StdErrorInterface } from "../StdError";

const _abi = [
  {
    inputs: [],
    name: "arithmeticError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "assertionError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "divisionError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "encodeStorageError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enumConversionError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "indexOOBError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowLevelError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "memOverflowError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "popError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroVarError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610b1c610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063ac3d92c611610070578063ac3d92c614610143578063b22dc54d14610161578063b67689da1461017f578063d160e4de1461019d578063fa784a44146101bb576100a8565b806305ee8612146100ad57806310332977146100cb5780631de45560146100e95780638995290f14610107578063986c5f6814610125575b600080fd5b6100b56101d9565b6040516100c291906107a7565b60405180910390f35b6100d361026b565b6040516100e091906107a7565b60405180910390f35b6100f16102fd565b6040516100fe91906107a7565b60405180910390f35b61010f61038f565b60405161011c91906107a7565b60405180910390f35b61012d610421565b60405161013a91906107a7565b60405180910390f35b61014b6104b3565b60405161015891906107a7565b60405180910390f35b6101696104c6565b60405161017691906107a7565b60405180910390f35b610187610558565b60405161019491906107a7565b60405180910390f35b6101a56105ea565b6040516101b291906107a7565b60405180910390f35b6101c361067c565b6040516101d091906107a7565b60405180910390f35b60326040516024016101eb919061081b565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b600160405160240161027d9190610871565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b602160405160240161030f91906108c7565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b60116040516024016103a1919061091d565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b60416040516024016104339190610973565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b6040518060200160405280600081525081565b60316040516024016104d891906109c9565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b605160405160240161056a9190610a1f565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b60226040516024016105fc9190610a75565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b601260405160240161068e9190610acb565b6040516020818303038152906040527f4e487b71000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505081565b600081519050919050565b600082825260208201905092915050565b60005b8381101561074857808201518184015260208101905061072d565b83811115610757576000848401525b50505050565b6000601f19601f8301169050919050565b60006107798261070e565b6107838185610719565b935061079381856020860161072a565b61079c8161075d565b840191505092915050565b600060208201905081810360008301526107c1818461076e565b905092915050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006108056108006107fb846107c9565b6107e0565b6107d3565b9050919050565b610815816107ea565b82525050565b6000602082019050610830600083018461080c565b92915050565b6000819050919050565b600061085b61085661085184610836565b6107e0565b6107d3565b9050919050565b61086b81610840565b82525050565b60006020820190506108866000830184610862565b92915050565b6000819050919050565b60006108b16108ac6108a78461088c565b6107e0565b6107d3565b9050919050565b6108c181610896565b82525050565b60006020820190506108dc60008301846108b8565b92915050565b6000819050919050565b60006109076109026108fd846108e2565b6107e0565b6107d3565b9050919050565b610917816108ec565b82525050565b6000602082019050610932600083018461090e565b92915050565b6000819050919050565b600061095d61095861095384610938565b6107e0565b6107d3565b9050919050565b61096d81610942565b82525050565b60006020820190506109886000830184610964565b92915050565b6000819050919050565b60006109b36109ae6109a98461098e565b6107e0565b6107d3565b9050919050565b6109c381610998565b82525050565b60006020820190506109de60008301846109ba565b92915050565b6000819050919050565b6000610a09610a046109ff846109e4565b6107e0565b6107d3565b9050919050565b610a19816109ee565b82525050565b6000602082019050610a346000830184610a10565b92915050565b6000819050919050565b6000610a5f610a5a610a5584610a3a565b6107e0565b6107d3565b9050919050565b610a6f81610a44565b82525050565b6000602082019050610a8a6000830184610a66565b92915050565b6000819050919050565b6000610ab5610ab0610aab84610a90565b6107e0565b6107d3565b9050919050565b610ac581610a9a565b82525050565b6000602082019050610ae06000830184610abc565b9291505056fea26469706673582212207cc83307fe02884c9f8da4ace1d049d91306219df86165efce8197d079104d8d64736f6c634300080c0033";

export class StdError__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StdError> {
    return super.deploy(overrides || {}) as Promise<StdError>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StdError {
    return super.attach(address) as StdError;
  }
  connect(signer: Signer): StdError__factory {
    return super.connect(signer) as StdError__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StdErrorInterface {
    return new utils.Interface(_abi) as StdErrorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StdError {
    return new Contract(address, _abi, signerOrProvider) as StdError;
  }
}
