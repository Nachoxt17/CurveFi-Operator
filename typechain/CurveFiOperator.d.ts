/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CurveFiOperatorInterface extends ethers.utils.Interface {
  functions: {
    "PoolAddresstoStandard(address)": FunctionFragment;
    "addLiquidity(address,address,uint256[2],uint256[3],uint256[4])": FunctionFragment;
    "deletePool(address)": FunctionFragment;
    "exchangeTokens(address,int128,int128,uint256,uint256,uint256)": FunctionFragment;
    "getLPTokensAmount(address)": FunctionFragment;
    "removeLiquidity(address,address)": FunctionFragment;
    "setPoolStandard(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PoolAddresstoStandard",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "deletePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "exchangeTokens",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokensAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolStandard",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PoolAddresstoStandard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deletePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolStandard",
    data: BytesLike
  ): Result;

  events: {
    "Received(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { sender: string; value: BigNumber }
>;

export class CurveFiOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CurveFiOperatorInterface;

  functions: {
    PoolAddresstoStandard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      _amountTIndexes236: [BigNumberish, BigNumberish],
      _amountTIndexes15: [BigNumberish, BigNumberish, BigNumberish],
      _amountTIndexes4: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deletePool(
      poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeTokens(
      curveFiPool: string,
      _tokenInIndexInt: BigNumberish,
      _tokenOutIndexInt: BigNumberish,
      _tokenInIndexUint: BigNumberish,
      _tokenOutIndexUint: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLPTokensAmount(
      LPTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolStandard(
      poolAddress: string,
      poolStandard: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PoolAddresstoStandard(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addLiquidity(
    curveFiPool: string,
    LPTokenAddress: string,
    _amountTIndexes236: [BigNumberish, BigNumberish],
    _amountTIndexes15: [BigNumberish, BigNumberish, BigNumberish],
    _amountTIndexes4: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deletePool(
    poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeTokens(
    curveFiPool: string,
    _tokenInIndexInt: BigNumberish,
    _tokenOutIndexInt: BigNumberish,
    _tokenInIndexUint: BigNumberish,
    _tokenOutIndexUint: BigNumberish,
    _amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLPTokensAmount(
    LPTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    curveFiPool: string,
    LPTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolStandard(
    poolAddress: string,
    poolStandard: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PoolAddresstoStandard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      _amountTIndexes236: [BigNumberish, BigNumberish],
      _amountTIndexes15: [BigNumberish, BigNumberish, BigNumberish],
      _amountTIndexes4: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    deletePool(poolAddress: string, overrides?: CallOverrides): Promise<void>;

    exchangeTokens(
      curveFiPool: string,
      _tokenInIndexInt: BigNumberish,
      _tokenOutIndexInt: BigNumberish,
      _tokenInIndexUint: BigNumberish,
      _tokenOutIndexUint: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLPTokensAmount(
      LPTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolStandard(
      poolAddress: string,
      poolStandard: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Received(address,uint256)"(
      sender?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;

    Received(
      sender?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;
  };

  estimateGas: {
    PoolAddresstoStandard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      _amountTIndexes236: [BigNumberish, BigNumberish],
      _amountTIndexes15: [BigNumberish, BigNumberish, BigNumberish],
      _amountTIndexes4: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deletePool(
      poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeTokens(
      curveFiPool: string,
      _tokenInIndexInt: BigNumberish,
      _tokenOutIndexInt: BigNumberish,
      _tokenInIndexUint: BigNumberish,
      _tokenOutIndexUint: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLPTokensAmount(
      LPTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolStandard(
      poolAddress: string,
      poolStandard: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PoolAddresstoStandard(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      _amountTIndexes236: [BigNumberish, BigNumberish],
      _amountTIndexes15: [BigNumberish, BigNumberish, BigNumberish],
      _amountTIndexes4: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deletePool(
      poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeTokens(
      curveFiPool: string,
      _tokenInIndexInt: BigNumberish,
      _tokenOutIndexInt: BigNumberish,
      _tokenInIndexUint: BigNumberish,
      _tokenOutIndexUint: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLPTokensAmount(
      LPTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      curveFiPool: string,
      LPTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolStandard(
      poolAddress: string,
      poolStandard: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
